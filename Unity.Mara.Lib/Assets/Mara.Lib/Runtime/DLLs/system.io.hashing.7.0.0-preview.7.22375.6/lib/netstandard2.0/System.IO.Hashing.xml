<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.IO.Hashing</name>
    </assembly>
    <members>
        <member name="T:System.IO.Hashing.Crc32">
            <summary>
              Provides an implementation of the CRC-32 algorithm, as used in
              ITU-T V.42 and IEEE 802.3.
            </summary>
            <remarks>
              <para>
                This implementation emits the answer in the Little Endian byte order so that
                the CRC residue relationship (CRC(message concat CRC(message))) is a fixed value) holds.
                For CRC-32 this stable output is the byte sequence <c>{ 0x1C, 0xDF, 0x44, 0x21 }</c>,
                the Little Endian representation of <c>0x2144DF1C</c>.
              </para>
              <para>
                There are multiple, incompatible, definitions of a 32-bit cyclic redundancy
                check (CRC) algorithm. When interoperating with another system, ensure that you
                are using the same definition. The definition used by this implementation is not
                compatible with the cyclic redundancy check described in ITU-T I.363.5.
              </para>
            </remarks>
        </member>
        <member name="M:System.IO.Hashing.Crc32.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.IO.Hashing.Crc32"/> class.
            </summary>
        </member>
        <member name="M:System.IO.Hashing.Crc32.Append(System.ReadOnlySpan{System.Byte})">
            <summary>
              Appends the contents of <paramref name="source"/> to the data already
              processed for the current hash computation.
            </summary>
            <param name="source">The data to process.</param>
        </member>
        <member name="M:System.IO.Hashing.Crc32.Reset">
            <summary>
              Resets the hash computation to the initial state.
            </summary>
        </member>
        <member name="M:System.IO.Hashing.Crc32.GetCurrentHashCore(System.Span{System.Byte})">
            <summary>
              Writes the computed hash value to <paramref name="destination"/>
              without modifying accumulated state.
            </summary>
            <param name="destination">The buffer that receives the computed hash value.</param>
        </member>
        <member name="M:System.IO.Hashing.Crc32.GetHashAndResetCore(System.Span{System.Byte})">
            <summary>
              Writes the computed hash value to <paramref name="destination"/>
              then clears the accumulated state.
            </summary>
        </member>
        <member name="M:System.IO.Hashing.Crc32.Hash(System.Byte[])">
            <summary>
              Computes the CRC-32 hash of the provided data.
            </summary>
            <param name="source">The data to hash.</param>
            <returns>The CRC-32 hash of the provided data.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.IO.Hashing.Crc32.Hash(System.ReadOnlySpan{System.Byte})">
            <summary>
              Computes the CRC-32 hash of the provided data.
            </summary>
            <param name="source">The data to hash.</param>
            <returns>The CRC-32 hash of the provided data.</returns>
        </member>
        <member name="M:System.IO.Hashing.Crc32.TryHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
            <summary>
              Attempts to compute the CRC-32 hash of the provided data into the provided destination.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="destination">The buffer that receives the computed hash value.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="destination"/> is long enough to receive
              the computed hash value (4 bytes); otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.IO.Hashing.Crc32.Hash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
              Computes the CRC-32 hash of the provided data into the provided destination.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="destination">The buffer that receives the computed hash value.</param>
            <returns>
              The number of bytes written to <paramref name="destination"/>.
            </returns>
        </member>
        <member name="T:System.IO.Hashing.Crc64">
            <summary>
              Provides an implementation of the CRC-64 algorithm as described in ECMA-182, Annex B.
            </summary>
            <remarks>
              <para>
                This implementation emits the answer in the Big Endian byte order so that
                the CRC residue relationship (CRC(message concat CRC(message))) is a fixed value) holds.
                For CRC-64 this stable output is the byte sequence
                <c>{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }</c>.
              </para>
              <para>
                There are multiple, incompatible, definitions of a 64-bit cyclic redundancy
                check (CRC) algorithm. When interoperating with another system, ensure that you
                are using the same definition. The definition used by this implementation is not
                compatible with the cyclic redundancy check described in ISO 3309.
              </para>
            </remarks>
        </member>
        <member name="M:System.IO.Hashing.Crc64.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.IO.Hashing.Crc64"/> class.
            </summary>
        </member>
        <member name="M:System.IO.Hashing.Crc64.Append(System.ReadOnlySpan{System.Byte})">
            <summary>
              Appends the contents of <paramref name="source"/> to the data already
              processed for the current hash computation.
            </summary>
            <param name="source">The data to process.</param>
        </member>
        <member name="M:System.IO.Hashing.Crc64.Reset">
            <summary>
              Resets the hash computation to the initial state.
            </summary>
        </member>
        <member name="M:System.IO.Hashing.Crc64.GetCurrentHashCore(System.Span{System.Byte})">
            <summary>
              Writes the computed hash value to <paramref name="destination"/>
              without modifying accumulated state.
            </summary>
            <param name="destination">The buffer that receives the computed hash value.</param>
        </member>
        <member name="M:System.IO.Hashing.Crc64.GetHashAndResetCore(System.Span{System.Byte})">
            <summary>
              Writes the computed hash value to <paramref name="destination"/>
              then clears the accumulated state.
            </summary>
        </member>
        <member name="M:System.IO.Hashing.Crc64.Hash(System.Byte[])">
            <summary>
              Computes the CRC-64 hash of the provided data.
            </summary>
            <param name="source">The data to hash.</param>
            <returns>The CRC-64 hash of the provided data.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.IO.Hashing.Crc64.Hash(System.ReadOnlySpan{System.Byte})">
            <summary>
              Computes the CRC-64 hash of the provided data.
            </summary>
            <param name="source">The data to hash.</param>
            <returns>The CRC-64 hash of the provided data.</returns>
        </member>
        <member name="M:System.IO.Hashing.Crc64.TryHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
            <summary>
              Attempts to compute the CRC-64 hash of the provided data into the provided destination.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="destination">The buffer that receives the computed hash value.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="destination"/> is long enough to receive
              the computed hash value (8 bytes); otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.IO.Hashing.Crc64.Hash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
              Computes the CRC-64 hash of the provided data into the provided destination.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="destination">The buffer that receives the computed hash value.</param>
            <returns>
              The number of bytes written to <paramref name="destination"/>.
            </returns>
        </member>
        <member name="T:System.IO.Hashing.XxHash32">
            <summary>
              Provides an implementation of the XxHash32 algorithm.
            </summary>
        </member>
        <member name="M:System.IO.Hashing.XxHash32.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.IO.Hashing.XxHash32"/> class.
            </summary>
            <remarks>
              The XxHash32 algorithm supports an optional seed value.
              Instances created with this constructor use the default seed, zero.
            </remarks>
        </member>
        <member name="M:System.IO.Hashing.XxHash32.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:System.IO.Hashing.XxHash32"/> class with
              a specified seed.
            </summary>
            <param name="seed">
              The hash seed value for computations from this instance.
            </param>
        </member>
        <member name="M:System.IO.Hashing.XxHash32.Reset">
            <summary>
              Resets the hash computation to the initial state.
            </summary>
        </member>
        <member name="M:System.IO.Hashing.XxHash32.Append(System.ReadOnlySpan{System.Byte})">
            <summary>
              Appends the contents of <paramref name="source"/> to the data already
              processed for the current hash computation.
            </summary>
            <param name="source">The data to process.</param>
        </member>
        <member name="M:System.IO.Hashing.XxHash32.GetCurrentHashCore(System.Span{System.Byte})">
            <summary>
              Writes the computed hash value to <paramref name="destination"/>
              without modifying accumulated state.
            </summary>
        </member>
        <member name="M:System.IO.Hashing.XxHash32.Hash(System.Byte[])">
            <summary>
              Computes the XxHash32 hash of the provided data.
            </summary>
            <param name="source">The data to hash.</param>
            <returns>The XxHash32 hash of the provided data.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.IO.Hashing.XxHash32.Hash(System.Byte[],System.Int32)">
            <summary>
              Computes the XxHash32 hash of the provided data using the provided seed.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="seed">The seed value for this hash computation.</param>
            <returns>The XxHash32 hash of the provided data.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.IO.Hashing.XxHash32.Hash(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
              Computes the XxHash32 hash of the provided data.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="seed">The seed value for this hash computation. The default is zero.</param>
            <returns>The XxHash32 hash of the provided data.</returns>
        </member>
        <member name="M:System.IO.Hashing.XxHash32.TryHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32)">
            <summary>
              Attempts to compute the XxHash32 hash of the provided data into the provided destination.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="destination">The buffer that receives the computed hash value.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <param name="seed">The seed value for this hash computation. The default is zero.</param>
            <returns>
              <see langword="true"/> if <paramref name="destination"/> is long enough to receive
              the computed hash value (4 bytes); otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.IO.Hashing.XxHash32.Hash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32)">
            <summary>
              Computes the XxHash32 hash of the provided data into the provided destination.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="destination">The buffer that receives the computed hash value.</param>
            <param name="seed">The seed value for this hash computation. The default is zero.</param>
            <returns>
              The number of bytes written to <paramref name="destination"/>.
            </returns>
        </member>
        <member name="T:System.IO.Hashing.XxHash64">
            <summary>
              Provides an implementation of the XxHash64 algorithm.
            </summary>
        </member>
        <member name="M:System.IO.Hashing.XxHash64.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.IO.Hashing.XxHash64"/> class.
            </summary>
            <remarks>
              The XxHash64 algorithm supports an optional seed value.
              Instances created with this constructor use the default seed, zero.
            </remarks>
        </member>
        <member name="M:System.IO.Hashing.XxHash64.#ctor(System.Int64)">
            <summary>
              Initializes a new instance of the <see cref="T:System.IO.Hashing.XxHash64"/> class with
              a specified seed.
            </summary>
            <param name="seed">
              The hash seed value for computations from this instance.
            </param>
        </member>
        <member name="M:System.IO.Hashing.XxHash64.Reset">
            <summary>
              Resets the hash computation to the initial state.
            </summary>
        </member>
        <member name="M:System.IO.Hashing.XxHash64.Append(System.ReadOnlySpan{System.Byte})">
            <summary>
              Appends the contents of <paramref name="source"/> to the data already
              processed for the current hash computation.
            </summary>
            <param name="source">The data to process.</param>
        </member>
        <member name="M:System.IO.Hashing.XxHash64.GetCurrentHashCore(System.Span{System.Byte})">
            <summary>
              Writes the computed hash value to <paramref name="destination"/>
              without modifying accumulated state.
            </summary>
        </member>
        <member name="M:System.IO.Hashing.XxHash64.Hash(System.Byte[])">
            <summary>
              Computes the XxHash64 hash of the provided data.
            </summary>
            <param name="source">The data to hash.</param>
            <returns>The XxHash64 hash of the provided data.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.IO.Hashing.XxHash64.Hash(System.Byte[],System.Int64)">
            <summary>
              Computes the XxHash64 hash of the provided data using the provided seed.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="seed">The seed value for this hash computation.</param>
            <returns>The XxHash64 hash of the provided data.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.IO.Hashing.XxHash64.Hash(System.ReadOnlySpan{System.Byte},System.Int64)">
            <summary>
              Computes the XxHash64 hash of the provided data.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="seed">The seed value for this hash computation. The default is zero.</param>
            <returns>The XxHash64 hash of the provided data.</returns>
        </member>
        <member name="M:System.IO.Hashing.XxHash64.TryHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int64)">
            <summary>
              Attempts to compute the XxHash64 hash of the provided data into the provided destination.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="destination">The buffer that receives the computed hash value.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <param name="seed">The seed value for this hash computation. The default is zero.</param>
            <returns>
              <see langword="true"/> if <paramref name="destination"/> is long enough to receive
              the computed hash value (4 bytes); otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.IO.Hashing.XxHash64.Hash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int64)">
            <summary>
              Computes the XxHash64 hash of the provided data into the provided destination.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="destination">The buffer that receives the computed hash value.</param>
            <param name="seed">The seed value for this hash computation. The default is zero.</param>
            <returns>
              The number of bytes written to <paramref name="destination"/>.
            </returns>
        </member>
        <member name="T:System.IO.Hashing.NonCryptographicHashAlgorithm">
            <summary>
              Represents a non-cryptographic hash algorithm.
            </summary>
        </member>
        <member name="P:System.IO.Hashing.NonCryptographicHashAlgorithm.HashLengthInBytes">
            <summary>
              Gets the number of bytes produced from this hash algorithm.
            </summary>
            <value>The number of bytes produced from this hash algorithm.</value>
        </member>
        <member name="M:System.IO.Hashing.NonCryptographicHashAlgorithm.#ctor(System.Int32)">
            <summary>
              Called from constructors in derived classes to initialize the
              <see cref="T:System.IO.Hashing.NonCryptographicHashAlgorithm"/> class.
            </summary>
            <param name="hashLengthInBytes">
              The number of bytes produced from this hash algorithm.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="hashLengthInBytes"/> is less than 1.
            </exception>
        </member>
        <member name="M:System.IO.Hashing.NonCryptographicHashAlgorithm.Append(System.ReadOnlySpan{System.Byte})">
            <summary>
              When overridden in a derived class,
              appends the contents of <paramref name="source"/> to the data already
              processed for the current hash computation.
            </summary>
            <param name="source">The data to process.</param>
        </member>
        <member name="M:System.IO.Hashing.NonCryptographicHashAlgorithm.Reset">
            <summary>
              When overridden in a derived class,
              resets the hash computation to the initial state.
            </summary>
        </member>
        <member name="M:System.IO.Hashing.NonCryptographicHashAlgorithm.GetCurrentHashCore(System.Span{System.Byte})">
            <summary>
              When overridden in a derived class,
              writes the computed hash value to <paramref name="destination"/>
              without modifying accumulated state.
            </summary>
            <param name="destination">The buffer that receives the computed hash value.</param>
            <remarks>
              <para>
                Implementations of this method must write exactly
                <see cref="P:System.IO.Hashing.NonCryptographicHashAlgorithm.HashLengthInBytes"/> bytes to <paramref name="destination"/>.
                Do not assume that the buffer was zero-initialized.
              </para>
              <para>
                The <see cref="T:System.IO.Hashing.NonCryptographicHashAlgorithm"/> class validates the
                size of the buffer before calling this method, and slices the span
                down to be exactly <see cref="P:System.IO.Hashing.NonCryptographicHashAlgorithm.HashLengthInBytes"/> in length.
              </para>
            </remarks>
        </member>
        <member name="M:System.IO.Hashing.NonCryptographicHashAlgorithm.Append(System.Byte[])">
            <summary>
              Appends the contents of <paramref name="source"/> to the data already
              processed for the current hash computation.
            </summary>
            <param name="source">The data to process.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.IO.Hashing.NonCryptographicHashAlgorithm.Append(System.IO.Stream)">
            <summary>
              Appends the contents of <paramref name="stream"/> to the data already
              processed for the current hash computation.
            </summary>
            <param name="stream">The data to process.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:System.IO.Hashing.NonCryptographicHashAlgorithm.AppendAsync(System.IO.Stream,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:System.IO.Hashing.NonCryptographicHashAlgorithm.AppendAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
              Asychronously reads the contents of <paramref name="stream"/>
              and appends them to the data already
              processed for the current hash computation.
            </summary>
            <param name="stream">The data to process.</param>
            <param name="cancellationToken">
              The token to monitor for cancellation requests.
              The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="stream"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.IO.Hashing.NonCryptographicHashAlgorithm.GetCurrentHash">
            <summary>
              Gets the current computed hash value without modifying accumulated state.
            </summary>
        </member>
        <member name="M:System.IO.Hashing.NonCryptographicHashAlgorithm.TryGetCurrentHash(System.Span{System.Byte},System.Int32@)">
            <summary>
              Attempts to write the computed hash value to <paramref name="destination"/>
              without modifying accumulated state.
            </summary>
            <param name="destination">The buffer that receives the computed hash value.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="destination"/> is long enough to receive
              the computed hash value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.IO.Hashing.NonCryptographicHashAlgorithm.GetCurrentHash(System.Span{System.Byte})">
            <summary>
              Writes the computed hash value to <paramref name="destination"/>
              without modifying accumulated state.
            </summary>
            <param name="destination">The buffer that receives the computed hash value.</param>
            <returns>
              The number of bytes written to <paramref name="destination"/>,
              which is always <see cref="P:System.IO.Hashing.NonCryptographicHashAlgorithm.HashLengthInBytes"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
              <paramref name="destination"/> is shorter than <see cref="P:System.IO.Hashing.NonCryptographicHashAlgorithm.HashLengthInBytes"/>.
            </exception>
        </member>
        <member name="M:System.IO.Hashing.NonCryptographicHashAlgorithm.GetHashAndReset">
            <summary>
              Gets the current computed hash value and clears the accumulated state.
            </summary>
        </member>
        <member name="M:System.IO.Hashing.NonCryptographicHashAlgorithm.TryGetHashAndReset(System.Span{System.Byte},System.Int32@)">
            <summary>
              Attempts to write the computed hash value to <paramref name="destination"/>.
              If successful, clears the accumulated state.
            </summary>
            <param name="destination">The buffer that receives the computed hash value.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <see langword="true"/> and clears the accumulated state
              if <paramref name="destination"/> is long enough to receive
              the computed hash value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.IO.Hashing.NonCryptographicHashAlgorithm.GetHashAndReset(System.Span{System.Byte})">
            <summary>
              Writes the computed hash value to <paramref name="destination"/>
              then clears the accumulated state.
            </summary>
            <param name="destination">The buffer that receives the computed hash value.</param>
            <returns>
              The number of bytes written to <paramref name="destination"/>,
              which is always <see cref="P:System.IO.Hashing.NonCryptographicHashAlgorithm.HashLengthInBytes"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
              <paramref name="destination"/> is shorter than <see cref="P:System.IO.Hashing.NonCryptographicHashAlgorithm.HashLengthInBytes"/>.
            </exception>
        </member>
        <member name="M:System.IO.Hashing.NonCryptographicHashAlgorithm.GetHashAndResetCore(System.Span{System.Byte})">
            <summary>
              Writes the computed hash value to <paramref name="destination"/>
              then clears the accumulated state.
            </summary>
            <param name="destination">The buffer that receives the computed hash value.</param>
            <remarks>
              <para>
                Implementations of this method must write exactly
                <see cref="P:System.IO.Hashing.NonCryptographicHashAlgorithm.HashLengthInBytes"/> bytes to <paramref name="destination"/>.
                Do not assume that the buffer was zero-initialized.
              </para>
              <para>
                The <see cref="T:System.IO.Hashing.NonCryptographicHashAlgorithm"/> class validates the
                size of the buffer before calling this method, and slices the span
                down to be exactly <see cref="P:System.IO.Hashing.NonCryptographicHashAlgorithm.HashLengthInBytes"/> in length.
              </para>
              <para>
                The default implementation of this method calls
                <see cref="M:System.IO.Hashing.NonCryptographicHashAlgorithm.GetCurrentHashCore(System.Span{System.Byte})"/> followed by <see cref="M:System.IO.Hashing.NonCryptographicHashAlgorithm.Reset"/>.
                Overrides of this method do not need to call either of those methods,
                but must ensure that the caller cannot observe a difference in behavior.
              </para>
            </remarks>
        </member>
        <member name="M:System.IO.Hashing.NonCryptographicHashAlgorithm.GetHashCode">
            <summary>
              This method is not supported and should not be called.
              Call <see cref="M:System.IO.Hashing.NonCryptographicHashAlgorithm.GetCurrentHash"/> or <see cref="M:System.IO.Hashing.NonCryptographicHashAlgorithm.GetHashAndReset"/>
              instead.
            </summary>
            <returns>This method will always throw a <see cref="T:System.NotSupportedException"/>.</returns>
            <exception cref="T:System.NotSupportedException">In all cases.</exception>
        </member>
        <member name="P:System.SR.Argument_DestinationTooShort">
            <summary>Destination is too short.</summary>
        </member>
        <member name="P:System.SR.NotSupported_GetHashCode">
            <summary>The GetHashCode method is not supported on this object. Use GetCurrentHash or GetHashAndReset to retrieve the hash code computed by this object.</summary>
        </member>
        <member name="T:System.Runtime.InteropServices.LibraryImportAttribute">
            <summary>
            Attribute used to indicate a source generator should create a function for marshalling
            arguments instead of relying on the runtime to generate an equivalent marshalling function at run-time.
            </summary>
            <remarks>
            This attribute is meaningless if the source generator associated with it is not enabled.
            The current built-in source generator only supports C# and only supplies an implementation when
            applied to static, partial, non-generic methods.
            </remarks>
        </member>
        <member name="M:System.Runtime.InteropServices.LibraryImportAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.LibraryImportAttribute"/>.
            </summary>
            <param name="libraryName">Name of the library containing the import.</param>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.LibraryName">
            <summary>
            Gets the name of the library containing the import.
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.EntryPoint">
            <summary>
            Gets or sets the name of the entry point to be called.
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshalling">
            <summary>
            Gets or sets how to marshal string arguments to the method.
            </summary>
            <remarks>
            If this field is set to a value other than <see cref="F:System.Runtime.InteropServices.StringMarshalling.Custom" />,
            <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType" /> must not be specified.
            </remarks>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> used to control how string arguments to the method are marshalled.
            </summary>
            <remarks>
            If this field is specified, <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshalling" /> must not be specified
            or must be set to <see cref="F:System.Runtime.InteropServices.StringMarshalling.Custom" />.
            </remarks>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.SetLastError">
            <summary>
            Gets or sets whether the callee sets an error (SetLastError on Windows or errno
            on other platforms) before returning from the attributed method.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.StringMarshalling">
            <summary>
            Specifies how strings should be marshalled for generated p/invokes
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
